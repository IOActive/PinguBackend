# Copyright 2024 IOActive
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import re
from django.db import models
import uuid
from PinguApi.submodels.platforms import Supported_Platforms
from PinguApi.submodels.project import Project

class Fuzzer(models.Model):
    # UUID
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    # Additionally allows '.' and '@' over NAME_CHECK_REGEX.
    VALID_NAME_REGEX = re.compile(r'^[a-zA-Z0-9_@.-]+$')
    # Last update time.
    timestamp = models.DateTimeField(auto_now=True)
    
    # Project ID
    project = models.ForeignKey(to=Project, on_delete=models.CASCADE, null=True, blank=True)

    # Fuzzer Name.
    name = models.CharField(max_length=50, unique=True)

    # The name of the archive that the user uploaded.
    filename = models.CharField(max_length=50, default="", blank=True, null=True)
    
    # Zip file containing the fuzzer. Dont store it to the Database just keep the blob data.
    fuzzer_zip = models.FileField(upload_to='tmp', null=True, verbose_name="", max_length=200, blank=True)

    # String representation of the file size.
    file_size = models.IntegerField(default=0)

    # Blobstore path or URL for this fuzzer.
    blobstore_path = models.CharField(max_length=200, default="", blank=True, null=True)

    # Fuzzer's main executable path, relative to root.
    executable_path = models.CharField(max_length=200, default="", blank=True, null=True)

    # Revision number of the fuzzer.
    revision = models.FloatField(default=1.0)

    # Testcase timeout.
    timeout = models.IntegerField(default=0)

    # Supported platforms.
    supported_platforms = models.CharField(max_length=50,
                                default='NA',
                                choices=Supported_Platforms.choices)
    
    # Custom script that should be used to launch chrome for this fuzzer.
    launcher_script = models.CharField(max_length=200, default="", blank=True, null=True)

    # Custom script that should be used if the fuzzer needs to be install or has depencies 
    install_script = models.CharField(max_length=200, default="", blank=True, null=True)

    # Result from the last fuzzer run showing the number of testcases generated.
    result = models.TextField(default="", blank=True, null=True)

    # Last result update timestamp.
    result_timestamp = models.DateTimeField(blank=True, null=True)

    # Console output from last fuzzer run.
    console_output = models.TextField(default="", blank=True, null=True)

    # Return code from last fuzzer run.
    return_code = models.IntegerField(default=1)

    # Blobstore key for the sample testcase generated by the fuzzer.
    sample_testcase = models.TextField(default="", blank=True, null=True)

    # Max testcases to generate for this fuzzer.
    max_testcases = models.IntegerField(default=1000)

    # Does it run un-trusted content ? Examples including running live sites.
    untrusted_content = models.BooleanField(default=False)

    # Additional environment variables that need to be set for this fuzzer.
    additional_environment_string = models.CharField(max_length=500, default="", blank=True, null=True)

    # Column specification for stats.
    stats_columns = models.JSONField(default=dict, blank=True, null=True)

    # Helpful descriptions for the stats_columns. In a yaml format.
    stats_column_descriptions = models.JSONField(default=dict, blank=True, null=True)

    # Whether this is a builtin fuzzer.
    builtin = models.BooleanField(default=False)

    # Whether this is a differential fuzzer.
    differential = models.BooleanField(default=False)

    # If this flag is set, fuzzer generates the testcase in the larger directory
    # on disk |FUZZ_INPUTS_DISK|, rather than smaller tmpfs one (FUZZ_INPUTS).
    has_large_testcases = models.BooleanField(default=False)

    # Data bundle name.
    data_bundle_name = models.CharField(max_length=50, default='', blank=True, null=True)
    
    class Meta:
        db_table = 'fuzzer'
