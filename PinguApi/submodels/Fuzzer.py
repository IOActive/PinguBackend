import re
from django.db import models
import uuid


class Fuzzer(models.Model):
    # UUID
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    # Additionally allows '.' and '@' over NAME_CHECK_REGEX.
    VALID_NAME_REGEX = re.compile(r'^[a-zA-Z0-9_@.-]+$')
    # Last update time.
    timestamp = models.DateField()
    # Fuzzer Name.
    name = models.CharField(max_length=50, unique=True)

    # The name of the archive that the user uploaded.
    filename = models.CharField(max_length=50)

    # String representation of the file size.
    file_size = models.CharField(max_length=50)

    # Blobstore path or URL for this fuzzer.
    blobstore_path = models.CharField(max_length=200)

    # Fuzzer's main executable path, relative to root.
    executable_path = models.CharField(max_length=200)

    # Revision number of the fuzzer.
    revision = models.FloatField(default=1.0)

    # Testcase timeout.
    timeout = models.IntegerField()

    # Supported platforms.
    supported_platforms = models.CharField(max_length=50)

    # Custom script that should be used to launch chrome for this fuzzer.
    launcher_script = models.CharField(max_length=200)

    # Result from the last fuzzer run showing the number of testcases generated.
    result = models.CharField(max_length=500, default="")

    # Last result update timestamp.
    result_timestamp = models.DateField()

    # Console output from last fuzzer run.
    console_output = models.CharField(max_length=500, default="")

    # Return code from last fuzzer run.
    return_code = models.IntegerField(default=1)

    # Blobstore key for the sample testcase generated by the fuzzer.
    sample_testcase = models.CharField(max_length=500, default="")

    # Max testcases to generate for this fuzzer.
    max_testcases = models.IntegerField()

    # Does it run un-trusted content ? Examples including running live sites.
    untrusted_content = models.BooleanField(default=False)

    # Additional environment variables that need to be set for this fuzzer.
    additional_environment_string = models.CharField(max_length=500)

    # Column specification for stats.
    stats_columns = models.CharField(max_length=50)

    # Helpful descriptions for the stats_columns. In a yaml format.
    stats_column_descriptions = models.CharField(max_length=50)

    # Whether this is a builtin fuzzer.
    builtin = models.BooleanField(default=False)

    # Whether this is a differential fuzzer.
    differential = models.BooleanField(default=False)

    # If this flag is set, fuzzer generates the testcase in the larger directory
    # on disk |FUZZ_INPUTS_DISK|, rather than smaller tmpfs one (FUZZ_INPUTS).
    has_large_testcases = models.BooleanField(default=False)

    # Data bundle name.
    data_bundle_name = models.CharField(max_length=50, default='')
